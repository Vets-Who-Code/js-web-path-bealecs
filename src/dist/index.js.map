{"mappings":"AAAA,2DAA2D;AAQ3D,8GAA8G;AAC9G,SAAS,gCAAU,MAAa,EAAE,GAAW,EAAE;IAC3C,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,IACpB,OAAO,IAAI,CAAC,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;IAErD,OAAO;AACX;AAEA,MAAM,iCAAkB,EAAE,EAAE,kGAAkG;AAE9H,MAAM,iCAAW,gCAAU,gCAAU,KAAK,yCAAyC;AAEnF,QAAQ,GAAG,CAAC,iCAAW,aAAa;AAEpC,QAAQ,GAAG,CAAC","sources":["src/index.tsx"],"sourcesContent":["//build an array of objects with their values being strings\r\n\r\ninterface Object {  //creating new interface for the new type\r\n    value: string;\r\n}\r\n\r\ntype myArr = Array<Object>; //created the type of array based off interface created before\r\n\r\n//Function iterating through number parameter times to create that many new array objects with random strings.\r\nfunction getArrNum(newArr: myArr, num: number) {\r\n    for(let i = 0; i < num; i++) {\r\n        newArr.push(Math.random().toString(36).substring(7));\r\n    }\r\n    return newArr;\r\n}\r\n\r\nconst finalArr: myArr = []; //declaring a new variable with the type of the earlier created type, and making it an empty array\r\n\r\nconst callFunc = getArrNum(finalArr, 10); //storing the function call to a variable\r\n\r\nconsole.log(callFunc); //console log\r\n\r\nconsole.log(\"Troubleshooting\");"],"names":[],"version":3,"file":"index.js.map"}